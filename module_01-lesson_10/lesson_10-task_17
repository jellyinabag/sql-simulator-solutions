/*
Задание:
На основе информации в таблицах orders и products рассчитайте ежедневную выручку сервиса и отразите её в колонке daily_revenue. 
Затем с помощью оконных функций и функций смещения посчитайте ежедневный прирост выручки. Прирост выручки отразите как в абсолютных значениях, так и в % относительно предыдущего дня. 
Колонку с абсолютным приростом назовите revenue_growth_abs, а колонку с относительным — revenue_growth_percentage.
Для самого первого дня укажите прирост равным 0 в обеих колонках. При проведении расчётов отменённые заказы не учитывайте. Результат отсортируйте по колонке с датами по возрастанию.
Метрики daily_revenue, revenue_growth_abs, revenue_growth_percentage округлите до одного знака при помощи ROUND().
Поля в результирующей таблице: date, daily_revenue, revenue_growth_abs, revenue_growth_percentage
*/

with unnest_products as (SELECT order_id,
                                creation_time,
                                unnest(product_ids) as product_id
                         FROM   orders
                         WHERE  order_id not in (SELECT order_id
                                                 FROM   user_actions
                                                 WHERE  action = 'cancel_order')), joined_table as (SELECT unnest_products.order_id,
                                                          unnest_products.creation_time,
                                                          products.price
                                                   FROM   unnest_products join products
                                                           ON unnest_products.product_id = products.product_id), order_prices as (SELECT order_id,
                                                                              creation_time,
                                                                              sum(price) as order_price
                                                                       FROM   joined_table
                                                                       GROUP BY order_id, creation_time)
SELECT date,
       daily_revenue,
       case when revenue_growth_abs is null then '0.0'
            else revenue_growth_abs end,
       case when revenue_growth_percentage is null then '0.0'
            else revenue_growth_percentage end
FROM   (SELECT date,
               daily_revenue,
               round(daily_revenue - lag(daily_revenue, 1) OVER (ORDER BY date),
                     1) as revenue_growth_abs,
               round((daily_revenue::decimal / lag(daily_revenue, 1) OVER (ORDER BY date)) * 100 - 100,
                     1) as revenue_growth_percentage
        FROM   (SELECT date(creation_time) as date,
                       round(sum(order_price) OVER (PARTITION BY date(creation_time)),
                             1) as daily_revenue
                FROM   order_prices) as revenue
        GROUP BY date, daily_revenue) as final_data
ORDER BY date
